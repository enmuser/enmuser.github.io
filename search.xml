<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java之NIO</title>
    <url>/2020/01/19/Java%E4%B9%8BNIO/</url>
    <content><![CDATA[<h5 id="NIO和IO的区别"><a href="#NIO和IO的区别" class="headerlink" title="NIO和IO的区别"></a>NIO和IO的区别</h5><ul>
<li><p>IO是面向的流的编程，是阻塞的</p>
</li>
<li><p>NIO是面向缓存区的编程，是非阻塞的，通道(channel)负责连接IO的两端，缓冲器(buffer)负责存储数据</p>
</li>
</ul>
<h5 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h5><p>缓存区的实质就是数组，不同的类型的数组，存储不同类型的数据(boolean 类型除外)</p>
<p><code>ByteBuffer</code> <code>CharBuffer</code> <code>ShortBuffer</code> <code>IntBuffer</code> <code>LongBuffer</code> <code>FloatBuffer</code> <code>DoubleBuffer</code></p>
<p>通过allocate(缓冲区大小)分配缓冲区</p>
<p>存取数据 </p>
<p>put() 将数据存入缓冲区</p>
<p>get() 获取缓冲区的数据</p>
<h5 id="缓冲区中的四个核心概念"><a href="#缓冲区中的四个核心概念" class="headerlink" title="缓冲区中的四个核心概念"></a>缓冲区中的四个核心概念</h5><p><code>capacity</code>:容量，表示缓冲区中的最大的存储数据的容量。一旦声明不能改变</p>
<p><code>limit</code>：限制，当前缓冲区实际的数据量(limit后得数据不能被读写)</p>
<p><code>position</code>：位置，表当前缓冲正在操作数据的位置</p>
<p><code>mark</code>:标记，记录当前position的位置，可以通过reset() 恢复mark记录的position</p>
<p>关系：<code>0</code> &lt;= <code>mark</code>&lt;= <code>position</code> &lt;= <code>limit</code> &lt;= <code>capacity</code></p>
<h5 id="直接缓存区和非直接缓存区的区别"><a href="#直接缓存区和非直接缓存区的区别" class="headerlink" title="直接缓存区和非直接缓存区的区别"></a>直接缓存区和非直接缓存区的区别</h5><ul>
<li>非直接缓存区：通过allocate() 方法分配缓冲区，将缓存区建立在JVM的内存中</li>
<li>直接缓冲区：通过allocateDirect() 方法分配直接缓冲区 将缓存区直接开辟在物理内存中 </li>
</ul>
<h5 id="缓冲区的操作"><a href="#缓冲区的操作" class="headerlink" title="缓冲区的操作"></a>缓冲区的操作</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取非直接缓存区</span></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 获取直接缓存区 </span></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">//在缓冲区放入数据</span></span><br><span class="line">String str = <span class="string">"abcdefg"</span>;</span><br><span class="line">buf.put(str.getBytes());</span><br><span class="line"><span class="comment">//切换读取数据模式 flip快速切换</span></span><br><span class="line">buf.flip();</span><br><span class="line"><span class="comment">//存入数据的byte数组</span></span><br><span class="line"><span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.limit()];</span><br><span class="line"><span class="comment">//从缓冲区获取数据</span></span><br><span class="line">buf.get(dst);</span><br><span class="line"><span class="comment">//重新可以读取刚才的数据 重置position=0 rewind倒带</span></span><br><span class="line">buf.rewind();</span><br><span class="line"><span class="comment">//清空缓冲区,但是缓冲区的数据依然存在，但是出于“被遗忘”的状态</span></span><br><span class="line">buf.clear();</span><br><span class="line"><span class="comment">//判断缓冲区是否还有剩余的数据</span></span><br><span class="line"><span class="keyword">if</span>(buf.hasRemaining())&#123;</span><br><span class="line">    <span class="comment">//获取缓冲区还可操作的数据量</span></span><br><span class="line">    buf.remaining(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h5><p>通道(channel):用于源节点和目标节点的链接，Java NIO 负责缓冲区中数据的传输。Channel本身不存储数据，需要配合缓冲区进行传输数据</p>
<p>通道在<code>java.nio.channels.Channel</code>接口</p>
<p><code>FileChannel</code> (本地文件)</p>
<p><code>SocketChannel</code>(网络TCP)</p>
<p><code>ServerSocketChannel</code>(网络TCP)</p>
<p><code>DatagramChannel</code>(UDP数据报)</p>
<h5 id="获取通道"><a href="#获取通道" class="headerlink" title="获取通道"></a>获取通道</h5><ol>
<li><p><strong>通过getChannel方法获取，以下类可以获取</strong></p>
<p>本地IO:  <code>FileInputStream</code>/<code>FileOutputStream</code>/<code>RandomAccessFile</code></p>
<p>网络IO:  <code>Socket</code> /<code>ServerSocket</code>/<code>DatagramSocket</code></p>
</li>
<li><p><strong>JDK1.7 在NIO.2 针对各通道提供的静态方法open()</strong></p>
</li>
<li><p><strong>JDK1.7 在NIO.2 的Files工具类中的newByteChannel()</strong></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel inChannel = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel outChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//FileInputStream FileOutputStream 获取通道</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"1.jpg"</span>));</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream((<span class="keyword">new</span> File(<span class="string">"2.jpg"</span>)));</span><br><span class="line">            <span class="comment">//获取FileChannel</span></span><br><span class="line">            inChannel = fis.getChannel();</span><br><span class="line">            outChannel = fos.getChannel();</span><br><span class="line">            <span class="comment">//准备缓冲区(非直接缓冲区)</span></span><br><span class="line">            ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="comment">//通道读取数据到缓冲区(写入缓冲区)</span></span><br><span class="line">            <span class="keyword">while</span>(inChannel.read(buf) != -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                buf.flip();<span class="comment">//转换到读的模式</span></span><br><span class="line">                outChannel.write(buf);<span class="comment">//将缓存的数据写入通道</span></span><br><span class="line">                buf.clear();<span class="comment">//清空缓冲区为下一次读入准备</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(outChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    outChannel.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(inChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    inChannel.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用Open方式获取通道</span></span><br><span class="line">FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">"1.jpg"</span>), StandardOpenOption.READ);</span><br><span class="line">FileChannel outChannel =                               FileChannel.open(Paths.get(<span class="string">"3.jpg"</span>),StandardOpenOption.WRITE,StandardOpenOption.READ,StandardOpenOption.CREATE);</span><br><span class="line"><span class="comment">//通过直接内存映射方式获取缓冲区</span></span><br><span class="line">MappedByteBuffer inbuf = inChannel.map(FileChannel.MapMode.READ_ONLY,<span class="number">0</span>,inChannel.size());</span><br><span class="line">MappedByteBuffer outbuf = outChannel.map(FileChannel.MapMode.READ_WRITE,<span class="number">0</span>,inChannel.size());</span><br><span class="line"><span class="comment">//直接对缓冲区进行读写</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[inbuf.limit()];</span><br><span class="line">inbuf.get(bytes);</span><br><span class="line">outbuf.put(bytes);</span><br><span class="line">inChannel.close();</span><br><span class="line">outChannel.close();</span><br></pre></td></tr></table></figure>

<h5 id="通道之间的数据传输"><a href="#通道之间的数据传输" class="headerlink" title="通道之间的数据传输"></a>通道之间的数据传输</h5><p><code>transferFrom()  transferTo()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用Open方式获取通道</span></span><br><span class="line">FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">"1.jpg"</span>), StandardOpenOption.READ);</span><br><span class="line">FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">"3.jpg"</span>),StandardOpenOption.WRITE,StandardOpenOption.READ,StandardOpenOption.CREATE);</span><br><span class="line"><span class="comment">//通道直接的数据传输</span></span><br><span class="line">inChannel.transferTo(<span class="number">0</span>,inChannel.size(),outChannel);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">outChannel.transferFrom(inChannel,<span class="number">0</span>,inChannel.size());</span><br><span class="line">inChannel.close();</span><br><span class="line">outChannel.close();</span><br></pre></td></tr></table></figure>

<h5 id="分散-Scatter-与聚集-Gather"><a href="#分散-Scatter-与聚集-Gather" class="headerlink" title="分散(Scatter)与聚集(Gather)"></a>分散(Scatter)与聚集(Gather)</h5><ul>
<li><p>分散读取(Scattering Reads) 将通道中的数据分散到多个缓冲区</p>
</li>
<li><p>聚集写入(Gathering Writes) 将多个缓冲区中的数据聚集到通道中 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"1.txt"</span>,<span class="string">"rw"</span>);</span><br><span class="line">FileChannel channel1 = raf.getChannel();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf1 = ByteBuffer.allocate(<span class="number">500</span>);</span><br><span class="line">ByteBuffer buf2 = ByteBuffer.allocate(<span class="number">500</span>);</span><br><span class="line">ByteBuffer[] byteBuffers = &#123;buf1,buf2&#125;;</span><br><span class="line"><span class="comment">//分散读取</span></span><br><span class="line">channel1.read(byteBuffers);</span><br><span class="line"><span class="keyword">for</span>(ByteBuffer buf : byteBuffers)</span><br><span class="line">&#123;</span><br><span class="line">   buf.flip();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** System.out.println(new String(byteBuffers[0].array(),0,byteBuffers[0].limit()));</span></span><br><span class="line"><span class="comment">System.out.println("--------------------------------------------------------");</span></span><br><span class="line"><span class="comment">System.out.println(new String(byteBuffers[1].array(),0,byteBuffers[0].limit()));*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//聚集写入</span></span><br><span class="line">        RandomAccessFile raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="string">"2.txt"</span>,<span class="string">"rw"</span>);</span><br><span class="line">        FileChannel channel2 = raf2.getChannel();</span><br><span class="line">        channel2.write(byteBuffers);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Charset cset = Charset.forName(<span class="string">"GBK"</span>);</span><br><span class="line"><span class="comment">//字符到字节数组 编码</span></span><br><span class="line">CharsetEncoder encoder = cset.newEncoder();</span><br><span class="line"><span class="comment">//字节数组到字符 解码</span></span><br><span class="line">CharsetDecoder decoder = cset.newDecoder();</span><br><span class="line">CharBuffer cbuf = CharBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">cbuf.put(<span class="string">"张家口检索"</span>);</span><br><span class="line">cbuf.flip();</span><br><span class="line">ByteBuffer buf = encoder.encode(cbuf);</span><br><span class="line"><span class="comment">//buf.flip();</span></span><br><span class="line">CharBuffer cbuf1 = decoder.decode(buf);</span><br><span class="line">System.out.println(cbuf1.toString());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>-java -NIO</category>
      </categories>
      <tags>
        <tag>-java -NIO</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第二篇</title>
    <url>/2020/01/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MarkDown小计</title>
    <url>/2020/01/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一级标题</span><br><span class="line">##二级标题</span><br><span class="line">###三级标题</span><br><span class="line">####四级标题</span><br><span class="line">#####五级标题</span><br><span class="line">######六级标题</span><br></pre></td></tr></table></figure>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2.代码块"></a>2.代码块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure>
<p>代码块<br>​```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class App </span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println( &quot;Hello World!&quot; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p><strong>这是加粗</strong></p>
<p><em>这是斜体</em></p>
<p><strong><em>这是加粗斜体</em></strong></p>
<p><del>这是加删除线</del></p>
<h2 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;123</span><br><span class="line">&gt;&gt;123</span><br><span class="line">&gt;&gt;&gt;123</span><br></pre></td></tr></table></figure>

<blockquote>
<p>123</p>
<blockquote>
<p>123</p>
<blockquote>
<p>123</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;分割线</span><br><span class="line">---</span><br><span class="line">&#x2F;&#x2F;分割线</span><br><span class="line">***</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h2 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在线插入和本地插入</span><br><span class="line">![图片标识](图片路径(url&#x2F;本地相对地址))</span><br></pre></td></tr></table></figure>

<img src="/images/myimg/1.jpg" alt="我的图片" style="zoom:60%;" />

<h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;超链接</span><br><span class="line">[我的GitHub(标识)](超链接地址)</span><br></pre></td></tr></table></figure>

<p><a href="https://enmuser.github.io/">我的GitHub</a></p>
<h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;无序列表</span><br><span class="line">- 列表1</span><br><span class="line">- 列表2</span><br><span class="line">- 列表3</span><br><span class="line">&#x2F;&#x2F;有序列表</span><br><span class="line">1.列表1</span><br><span class="line">2.列表2</span><br><span class="line">3.列表3</span><br></pre></td></tr></table></figure>

<ul>
<li>列表1</li>
<li>列表2</li>
<li>列表3</li>
</ul>
<ol>
<li><p>列表1</p>
</li>
<li><p>列表2</p>
</li>
<li><p>列表3</p>
</li>
</ol>
<h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">姓名</th>
<th align="center">年级排名</th>
<th align="center">班级排名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">张三</td>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">李四</td>
<td align="center">2</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">王五</td>
<td align="center">3</td>
<td align="center">3</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>-MarkDown -基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
